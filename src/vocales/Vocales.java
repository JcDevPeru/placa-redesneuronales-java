/*
 * Red MLF para reconocer digitos
 */
package vocales;

import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author Ev
 */
public class Vocales {
    
String letra="";
String placa ="";
    public void analizar(int[][] patron){
       
        int filas_entrada = 7;
        int col_entrada = 5;
        int neuronas_entrada = 35;
        int neuronas_oculta = 6;
        int neuronas_salida = 5;
        int i, j, k;
        
        
         //String  letra=null;
        
        double[][] pesos_entrada_oculta = {
            {0.23911777649929053,3.0015371729222466,0.3991882983909588,1.9168604459868854,-3.7850997772908586,0.10658499766894439},
            {-1.7810170345446075,-1.7959035633737446,-0.5087539534384066,-0.2906932170143197,2.0257199596678186,0.36524513224384014},
            {-1.0169717207396642,-0.9580488934934532,0.06715769399834066,-1.2434899425628618,2.7372679160369264,-0.6502646355595827},
            {-1.5974138706360559,-1.7811364152980718,-0.6619405035473468,-0.23094227887433863,2.2027938787539716,0.27697620642419657},
            {5.729947508150398E-4,2.9888920360141022,0.4135193666935494,1.710936649555014,-3.6053697118918717,-0.16131482711835815},
            {-0.06454731630680513,-0.24981107868170463,-0.29383357860640363,0.7806378625562203,-0.6772465472301386,0.9120305921231935},
            {0.10731054231487885,0.06197117924079241,0.07778477894761773,-0.05899828920203709,0.21953731461078466,-0.16252116769329567},
            {0.6545923804419811,1.0193822734482596,0.4416071592530958,	-1.1903318450811982,0.8282099072557364,-1.2133243710710395},
            {0.3824193984867254,0.16897362610760244,0.30135074257048405,-0.3519406059660468,0.07020832495291847,-0.07437961472796469},
            {1.282480624766615,	-1.906514881119931,-0.39164354119875494,-0.6289866568899871,0.478630024079843,1.0736093194046492},
            {-0.06815294845183989,-0.18339456734534476,-0.33972855986921596,0.621079239804681,-0.5590534854954055,0.6571280809177288},
            {0.22053716464357284,0.035214703918215046,0.03734813053235874,-0.30134505883189006,0.19164603772467137,-0.2831108616703415},
            {0.9587252743671919,1.0222792111588017,0.7234817646896947,-1.2056621906360454,0.7771064099921704,-1.1921200379107268},
            {0.37828667289649887,0.22955653632931408,0.06145114708835755,-0.182473570052845,0.20553707503519608,-0.409903986338242},
            {1.1892382139173299,-1.9030461748635077,-0.5174655733152883,-0.7772873237562613,0.43488256437618866,0.8850845855810244},
            {-0.271205718512516,-0.2692273575692418,-0.5018156298134584,0.7643137338030681,-0.4724682110497186,0.7119475508062021},
            {-3.0590332569753835,0.2629828869822078,1.0574679347185534,1.906093163366863,0.2532492582811716,0.2247428012750726},
            {-2.4723684703090534,1.316785215820902,1.55668537623315,0.8750402393230148,0.6374039099241597,-0.8035672245152442},
            {-1.5785549564167949,-0.9948366020625593,0.5998725039274111,0.6512016503747315,1.1645402195112873,0.13135995788050894},
            {1.341588417574538,	-1.5117521204792177,-0.6291970055194687,-0.5301842774452501,0.6784637544270585,0.7185462892012215},
            {-0.28237280184338087,-0.3026711121153196,-0.1339208030676254,0.4850078369069162,-0.3720595263089826,0.9114299044168591},
            {0.46279855970887374,0.29344038155145175,0.24168003996118106,-0.06868205229640807,0.2465782416709173,-0.1307741908346624},
            {0.6456136579099838,0.8080997528424226,0.38013315927565355,-1.0804559336430881,0.9045345264629268,-1.3758118920913325},
            {0.39012695717662577,0.3575020936409577,0.062148009388109375,-0.19500019881549485,-0.13270768411105036,-0.03509975221155979},
            {1.216495317264099,	-1.7844569141666151,-0.4202432643882056,-0.6748927449540941,0.47395651195827726,0.8551396527078191},
            {-0.199391260682112,-0.28042167720647265,-0.35386536952064906,0.42214344488632033,-0.4581352264749784,0.881373630104833},
            {0.29280319865434984,0.3858200799983712,0.12840819297364275,-0.21463615525568658,0.09319957141582721,-0.19466296996052682},
            {0.6612204094041674,0.8555244499638215,0.6988012698097177,-1.0845455373198865,0.7636375506777588,-1.3021481686374456},
            {0.40287544956760535,0.10978601727823695,0.3171121672494928,-0.37450265665235133,-0.11472320263534427,-0.09617127261624664},
            {1.348588043981409,	-1.9324370282029661,-0.6296016069546995,-0.6981197064275952,0.4633921463260542,1.032840199364116},
            {-2.9336755876155536,0.5159876189446695,0.8856337610354547,1.6613926146616638,0.26134690330085975,0.19561639360397884},
            {1.3182059570631701,0.7084731191725491,-1.1046735768064897,0.12191449232768974,-1.9315819043295912,0.4726023872484309},
            {2.142004717468212,	1.3618874065626012,-0.3730490567540266,-1.0850052021376133,-1.0864372593155234,-0.8681070651646964},
            {1.3454582262625665,0.8122637351680105,-0.9662385934973026,-0.020662411614619847,-1.5113699693137546,0.20774826694095858},
            {-3.037293053474923,0.28003983521005205,0.8893998711727827,1.6540759375004965,-0.09181405702138849,0.09398696073144032}};
        
        
        double[][] pesos_oculta_salida = {
            {-5.688505731221222,-5.160493755426294,0.6332416349309974,3.8002357502919555,4.223883297541218},
            {-4.724104689902284,3.5842330614885918,2.2504366268251212,-5.071442246132161,0.4780999954053213},
            {-0.17186442645182656,-0.2521602662191272,0.8994670928348799,-3.4033894665226616,-1.8329360441378317},
            {0.83999151852244,3.059962452321594,-3.453372260576989,-3.4038725583137643,0.24526877791186855},
            {3.19147736628033,-3.257504552067105,1.594440041087091,2.176328081074367,-7.067469244498716},
            {0.37855284035171444,-1.3871873739200427,-5.110487047268972,0.3531639444535885,0.1675716457417532}};
        
        
        
        double[] bias_entrada = {
            -0.48676790949500326,
            -0.5494177505189235,
            -0.4736064987094642,
            -0.5474599397788351,
            -0.483916010259067,
            -0.48929067535460746,
            -0.21945002564533989,
            -0.15492428129121752,
            -0.020009969912812953,
            -0.5321539351772002,
            -0.3227684730517089,
            -0.18357216180042024,
            -0.2201750401115318,
            -0.07278774995814893,
            -0.5395083635558184,
            -0.37458017613315203,
            -0.5232391155242418,
            -0.47649835704515886,
            -0.45722307344921714,
            -0.46360661485556226,
            -0.317891036063789,
            -0.0184880027637047,
            -0.1976301992773025,
            -0.1063489686129366,
            -0.5265133999242392,
            -0.3014030115019175,
            -0.03848932944869705,
            -0.12114735662104818,
            0.04654439844789999,
            -0.5463572866741665,
            -0.512919449006907,
            -0.49238102038695164,
            -0.35114810600837804,
            -0.4019413882515314,
            -0.5216227655796992,};
        double[] bias_oculta = {
            0.5106536917840349,
            0.3140614171521876,
            0.20450171187332922,
            -0.3053812815686603,
            0.2546146422016807,
            -0.3165292778933824};
        
        double[] bias_salida = {
            -0.18276540108292408,
            -0.6177362518844637,
            -0.4794012705201106,
            -0.30156780892249224,
            -0.5036455644776878,};
        
        int[] entrada = new int[neuronas_entrada];
        double[] sumatoria_entrada = new double[neuronas_entrada];
        double[] sigmoidal_entrada = new double[neuronas_entrada];
        
        double[] oculta = new double[neuronas_oculta];
        double[] sumatoria_oculta = new double[neuronas_oculta];
        double[] sigmoidal_oculta = new double[neuronas_oculta];
        
        double[] salida = new double[neuronas_salida];
        double[] sumatoria_salida = new double[neuronas_salida];
        double[] sigmoidal_salida = new double[neuronas_salida];


        //1. procesamiento de la capa de entrada
        //1.1 linealizar el patron de entrada
        for (i = 0; i < filas_entrada; i++) {
            for (j = 0; j < col_entrada; j++) {
                
                entrada[i * col_entrada + j] = patron[i][j];
            }
        }

        //1.2 sumar la entrada con el bias y calcular sigmidal
        for (i = 0; i < neuronas_entrada; i++) {
            sumatoria_entrada[i] = entrada[i] + bias_entrada[i];
            sigmoidal_entrada[i] = 1 / (1 + Math.exp(-1 * sumatoria_entrada[i]));
        }
        //2. procesamiento de la capa oculta
        // 2.1 sumatoria de productos de entrada por peso
        for (j = 0; j < neuronas_oculta; j++) {
            oculta[j] = 0;
            for (i = 0; i < neuronas_entrada; i++) {
                oculta[j] += sigmoidal_entrada[i] * pesos_entrada_oculta[i][j];
            }
        }
        //2.2 sumatoria mas bias y calculo de sigmoidal
        for (i = 0; i < neuronas_oculta; i++) {
            sumatoria_oculta[i] = oculta[i] + bias_oculta[i];
            sigmoidal_oculta[i] = 1 / (1 + Math.exp(-1 * sumatoria_oculta[i]));
        }

        //3. procesamiento de la capa salida
        //3.1 suamtoria de productos de salida x peso
        for (j = 0; j < neuronas_salida; j++) {
            salida[j] = 0;
            for (i = 0; i < neuronas_oculta; i++) {
                salida[j] += sigmoidal_oculta[i] * pesos_oculta_salida[i][j];
            }
        }
        //3.2 sumatoria mas bias y calculo de sigmoidal
        for (i = 0; i < neuronas_salida; i++) {
            sumatoria_salida[i] = salida[i] + bias_salida[i];
            sigmoidal_salida[i] = 1 / (1 + Math.exp(-1 * sumatoria_salida[i]));
            if(sigmoidal_salida[i]>0.80)
            {
                //System.out.println("Sigmoidal [" + i + "]- " + sigmoidal_salida[i]);
            }
            //System.out.println("Sigmoidal [" + i + "]- " + sigmoidal_salida[i]);
        }
        // 4.construyendo la interface de salida
        double mayor = -0.999;
        int neurona_activada = -1;
        for (i = 0; i < neuronas_salida; i++) {
            if (sigmoidal_salida[i] > mayor) {
                
                mayor = sigmoidal_salida[i];
                neurona_activada = i;
            }
        }
        
        if (mayor > 0.80 ) {
            // heuristica para saber si el patron es coherente
            switch (neurona_activada) {
                case 0:
                    letra="0";
                    break;
                    
                case 1:
                    letra="1";
                    break;
                case 2:
                    letra="2";
                case 3:
                    letra="3";
                    break;
                case 4:
                    letra="4";
                    break;
                case 5:
                    letra="5";
                    break;
                case 6:
                    letra="6";
                    break;
                case 7:
                    letra="7";
                    break;   
                case 8:
                    letra="8";
                    break;
                case 9:
                    letra="9";
                    break;
            }
        } else
        {
            letra="*";
            //System.out.println("No reconozco la letra "+letra);
            //JOptionPane.showMessageDialog(null, "No reconcosco la vocal");
        }
    }
    public  String getPlaca(){
        for(int i=0;i<1;i++){
            placa = placa +letra;
        }
        return placa;
    }
    }
    

